# Editor Bootstrap

This DB allows Eve programs to interact directly with the editor.

## Actions

Actions allow remotely controlling the editor.

### Inspect

`#inspect` will enable inspector interactions in the editor. While this is on, additional mouse and cursor events will be attached to the editor to forward the user's current tokens / elements of interest to the `@inspector` DB. When the action is removed, inspector mode will be disabled.

```
search @editor
  action = [#inspect]

bind @inspector
  action <- [#inspector]

bind @browser
  action <- [#editor #inspect]
```

### Jump To

`#jump-to` will scroll the editor viewport to bring the given `token` into view. If multiple `token`s are specified, only the first will be scrolled to.

```
search @editor
  action = [#jump-to token]

bind @browser
  action <- [#editor #jump-to token]
```

### Mark Between

`#mark-between` will create new spans *between* the given `token`s of the specified `type`. If `within` (another token id) is specified, it will constrain itself within that token. Otherwise it will go to the beginnning and end of the document. When the action is removed, the associated spans will be removed from the editor.

```
search @editor
  action = [#mark-between type token]

bind @browser
  action <- [#editor #mark-between type token]
```

Include the optional within attribute, if specified.

```
search @editor
  action = [#mark-between within]

bind @browser
  action <- [within]
```

### Mark Span

`#mark-span` will create a new span on the same range as the given `token`s of the specified `type`. When the action is removed, the associated spans will be removed from the editor.

```
search @editor
  action = [#mark-span type token]

bind @browser
  action <- [#editor #mark-span type token]
```

### Find Source

`#find-source` will request the originating `source` token(s) for a given set of `target` (token(s) or element(s)) from the language service. Results will be returned in the format `[#source target source type]`, where `target` is the same as provided, `source` is one of it's creating token(s), and `type` is the type of the `source` token. These records will be maintained by the editor until the action is removed, at which point they will be removed from the DB.

```
search @editor
  action = [#find-source target]

bind @browser
  action <- [#editor #find-source target]
```

### Find Related

`#find-related` will request all token(s) related to the `target` (token(s) or element(s)) from the language service. Related tokens are tokens which are directly joined to or unified with the target. if `block` is specified, the search will be restricted to tokens in the given `block`(s). Results will be returned in the format `[#related target token block type]`, where `target` and `block` are the same as provided, `token` is the related token, and `type` is the type of `token`. These records will be maintained by the editor until the action is removed, at which point they will be removed from the DB.

```
search @editor
  action = [#find-related target]

bind @browser
  action <- [#editor #find-related target]
```

Include the optional `block` attribute, if included.

```
search @editor
  action = [#find-related block]

bind @browser
  action <- [block]
```
