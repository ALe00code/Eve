# Editor Bootstrap

This DB allows Eve programs to interact directly with the editor.

## Actions

Actions allow remotely controlling the editor.

### Inspect

`#inspect` will enable inspector interactions in the editor. While this is on, additional mouse and cursor events will be attached to the editor to forward the user's current tokens / elements of interest to the `@inspector` DB. When the action is removed, inspector mode will be disabled.

```
search @editor
  action = [#inspect]

bind @inspector
  action <- [#inspector]

bind @browser
  action <- [#editor #inspect]
```

### Jump To

`#jump-to` will scroll the editor viewport to bring the given `token` into view. If multiple `token`s are specified, only the first will be scrolled to.

```
search @editor
  action = [#jump-to token]

bind @browser
  action <- [#editor #jump-to token]
```

### Mark Between

`#mark-between` will create new spans *between* the given `token`s of the specified `type`. If `within` (another token id) is specified, it will constrain itself within that token. Otherwise it will go to the beginnning and end of the document. When the action is removed, the associated spans will be removed from the editor.

```
search @editor
  action = [#mark-between type token]

bind @browser
  action <- [#editor #mark-between type token]
```

Include the optional within attribute, if specified.

```
search @editor
  action = [#mark-between within]

bind @browser
  action <- [within]
```

### Mark Span

`#mark-span` will create a new span on the same range as the given `token`s of the specified `type`. When the action is removed, the associated spans will be removed from the editor.

@NOTE: Mark span must be special cased to copy over all possible optional attributes right now. This is sad.

```
search @editor
  action = [#mark-span type token]

bind @browser
  action <- [#editor #mark-span type token]
```

Copy optional `message` attribute over if provided.

```
search @editor
  action = [#mark-span message]

bind @browser
  action <- [message]
```

Copy optional `kind` attribute over if provided.

```
search @editor
  action = [#mark-span kind]

bind @browser
  action <- [kind]
```

### Find Source

`#find-source` will request the originating source span(s) for a given `record` id, `record`, `attribute` pair, or `span` ids. from the language service. Results will be returned in the format `[#source record? attribute? span? source: [block span?]]`, where `record`, `attribute`, and `span` are the same as provided, `source` is a set of records containing the origin `block` and `span`s. These records will be maintained by the editor until the action is removed, at which point they will be removed from the DB.

```
search @editor
  action = [#find-source]
  lookup[record: action, attribute, value]

bind @browser
  action <- [#editor]
  lookup[record: action, attribute, value]
```

```
search @event
  event = [#editor #source]
  lookup[record: event, attribute, value]
bind @editor
  lookup[record: event, attribute, value]
```

### Find Related

`#find-related` will request all related `span`(s) for a given `variable` or `variable`(s) for a `span` from the language service. Related tokens are tokens which are directly joined to or unified with the target.  Results will be returned in the format `[#related span? variable?]`, where the argument you provided is the same and the other is filled in. These records will be maintained by the editor until the action is removed, at which point they will be removed from the DB.

```
search @editor
  action = [#find-related variable]

bind @browser
  action <- [#editor #find-related variable]

  [#div text: "RELATED {{action}} {{variable}}"]
```

```
search @editor
  action = [#find-related span]

bind @browser
  action <- [#editor #find-related span]
  [#div text: "RELATED {{action}} {{span}}"]
```

```
search @event
  event = [#editor #related]
  lookup[record: event, attribute, value]
bind @editor
  lookup[record: event, attribute, value]
```

### Find Value

`#find-value` will request the intermediate value(s) for the given set of `variable`(s) from the language service. By default, all intermediates for the variables will be returned. If `given` is specified, containing a set of `[attribute value]` pairs, only values that exist in the same "row" as the fixed values will be returned. If multiple values are provided for a variable, the results for each will be logically unioned. Results will be returned in the format `[#value variable value row]`, where `variable` is one of the given `variable`s, `value` is the intermediate value of the variable, and `row` is the "row" the intermediate is from (for matching intermediates of different variables up). These records will be maintained by the editor until the action is removed, at which point they will be removed from the DB.

```
search @editor
  action = [#find-value variable]

bind @browser
  action <- [#editor #find-value variable]
```

Include the optional `fixed` attribute, if provided.

```
search @editor
  action = [#find-value given]

bind @browser
  given <- [attribute: given.attribute value: given.value]
  action <- [given]
```

### Find Cardinality

`#find-cardinality` will request the cardinalities for the given set of `variable`(s) from the language service. The cardinality is the number of unique values that could satisfy `variable`. Results will be returned in the format `[#cardinality variable cardinality]` where `variable` is as given and cardinality is the count of satisfying values available. These records will be maintained by the editor until the action is removed, at which point they will be removed from the DB.

```
search @editor
  action = [#find-cardinality variable]

bind @browser
  action <- [#editor #find-cardinality variable]
```
