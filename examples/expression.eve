# parse expression examples
## operators and lexical classes
```
bind
  [name: "*" precedence:3 #operator]
  [name: "-" precedence:2 #operator]
  [name: "/" precedence:3 #operator]
  [name: "+" precedence:2 #operator]
  [name: "=" precedence:4 #operator]
  [name: "0" #digit]
  [name: "1" #digit]
  [name: "2" #digit]
  [name: "3" #digit]
  [name: "4" #digit]
  [name: "5" #digit]
  [name: "6" #digit]
  [name: "7" #digit]
  [name: "8" #digit]
  [name: "9" #digit]
```


##number
```
       search n = [#number text from]
                  name = substring[text from to:from]
                  [#digit name]
       bind  n <- [to: from + 1 val:string-to-number[text:name]]
```

## number fail
```
       search n = [#number text from]
              not([#digit name:substring[text from to:from]])
       bind n.fail := "not a number"
```

## expressions

### collapse stack
- how do I pull the root out of this guy now? looks like i have to generate a height (but how)
```
      search e = [#center-expression text from to next prev]
             nn = next.next
             pp = prev.prev
             right = if nn.precedence > e.precedence then nn else next
             left = if pp.precedence > e.precedence then pp else prev
      bind @browser
           [#div text: "zikky: {{substring[text from to]}} {{substring[text from:left.from to:left.to]}} {{substring[text from:right.from to:right.to]}}"]
      bind
             e.right := right
             e.left := left
```

### center expression failure
```
      search c = [#center-expression text parent from]
                 not(operator = [#operator name]
                     name = substring[text from to:from + string-length[text:name] - 1])
      bind   c.precedence := 0
             c.fail := "unknown operator"
```

### center expression success

```
      search c = [#center-expression text parent from]
             operator = [#operator name]
             olength = string-length[text:name]
             name = substring[text from to:olength + from - 1]
      bind  c <- [next: [#left-expression parent text from: from + olength prev:c]
                  precedence: operator.precedence
                  to: from + olength - 1]
```

### left expression success
```
         search e = [#left-expression val to text parent]
         bind e.next := [#center-expression text parent from:to prev:e]
```

### left expression start

```
         search e = [#left-expression text parent]
         bind e.tag += "number"
```


###start
```
          search parent = [#expression text]
          bind [#left-expression text from:1 parent prev:[precedence:0]]
```


## test case
```
          bind [#expression text: "4+5*7"]
```
