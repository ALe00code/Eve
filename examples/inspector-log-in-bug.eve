# Inspector Log In Bug

This example tests the inspector's ability to backtrack to a record missing an attribute somewhere up the chain.

Create some test users.

```
commit
  [#user name: "Jess" email: "jess@example.com"]
  [#user name: "Bob"]
```

Create the application root, which will hold state like the current user and page.

```
commit
  [#app page: "home"]
```

## Events

Log a user in when they click the log-in button.

```
search @event
  [#click element: button]

search @browser
  button = [#log-in #button app]
  [#log-in #input app value]

search
  user = [#user name: value]

commit
 user.tag += "logged-in"
 app.user := user
```

Log a user out and send them an email when they click the log-out button.

```
search @event
  [#click element: button]

search @browser
  button = [#log-out #button app]

search
  user = app.user

commit
  user.tag -= "logged-in"
  app.user := none

commit @email
  [#email to: user.email from: "admin@myapp.example.com" message: "Thanks for using my app!"]
```

## Drawing

Draw the application.

```
search
  app = [#app page]

bind @browser
  [#div style: [color: "#202020"] children:
    [#header style: [display: "flex" flex-direction: "row"] children:
      [#div text: "My App"]
      [#div #login-controls app]]
    [#div #page app]]
```

Draw the login controls. If a user is logged in she should see a "log out" button. If a user is logged out, she should see a "log in" button.

```
search @browser
  container = [#login-controls app]

search
  app.user = [#logged-in]

bind @browser
  container.children += [#button #log-out app text: "log out"]
```

```
search @browser
  container = [#login-controls app]

search
  not(app.user)

bind @browser
  container.children += [#input #log-in sort: 1 app placeholder: "username"]
  container.children += [#button #log-in sort: 2 app text: "log in"]
```

Draw the homepage into the `#page` if that's where the user is.

```
search @browser
  container = [#page app]

search
  app.page = "home"

bind @browser
  container.tag += "found"
  container.children +=
    [#div text: "Welcome back!"]
```

Draw the 404 page if the user isn't on a known page.

```
search @browser
  container = [#page not(#found) app]

bind @browser
  container.children +=
    [#div text: "404 Error, I don't know about any page named {{app.page}}"]
```

# Embedded Views

## KV Table

Create the DOM structure for `#kv-table`s.

```
search @view
  wrapper = [#kv-table kvs: [key]]
  ix = sort[value: key]

bind @browser
  wrapper.tag += "div"
  wrapper.children := [#div class: "flex-row" sort: ix children:
    [#div text: key style: [width: 120 padding-right: 10]]
    [#div #kv-values key]]
```

Inject the values for each key in the `#kv-table`.

```
search @view
  wrapper = [#kv-table kvs: [key value]]
  ix = sort[value per: key]

search @browser
  value-column = [#kv-values key]

bind @browser
  value-column.children += [#div text: value sort: ix]
```

## Attribute Table

```
search @view
  wrapper = [#attribute-table entity]

search (@session, @browser)
  lookup[record: entity attribute: key value]

bind @view
  wrapper.tag += "kv-table"
  wrapper.kvs := [key value]

commit @browser
  [#div text: "yo"]
```


# Integrated Pretend Inspector

## Mocking

Populate some mock analyzer data for the pretend inspector to use.

Grab all the elements

```
search @browser
  (elem, tag) = if e = [#div] then (e, "div")
                if e = [#button] then (e, "button")
                if e = [#input] then (e, "input")

bind @mock
  [#entity entity: elem type: "element" dom-tag: tag]
```

Grab the elements' children

```
search @mock
  [#entity entity]

search @browser
  entity = [children]

bind
  entity.children := children
```

Grab the attributes for each mocked entity

```
search @mock
  mock = [#entity entity]

search (@session, @browser, @mock)
  lookup[record: entity attribute value]

bind @mock
  mock.attributes := attribute
```

## Setup

```
commit @inspector
  [#option type: "element" sort: 2 text: "Should this not show up right now?"]
  [#option type: "element" sort: 3 text: "Is something missing here?"]
  [#option type: "element" sort: 4 text: "Are there too many/few of these?"]
  [#option type: "element" sort: 5 text: "Does this have an incorrect value"]
```

## Events

Open an inspector panel on double click

```
search @event
  [#double-click #direct-target element]

commit @inspector
  [#inspector target: element]
```

```
search @inspector
  [#inspector target: element type]

commit @browser
  [#div text: element]
```

## Piping

The inspector type is the type of the targeted entity or unknown if the target can't be found in the mock data.

```
search @inspector
  inspector = [#inspector target]

search @mock
  type = if [#entity entity: target type] then type
         else "unknown"

bind @inspector
  inspector.type := type
```

The inspector attributes are the attributes of the targeted entity

```
search @inspector
  inspector = [#inspector target]

search @mock
  [#entity entity: target attributes]

bind @inspector
  inspector.attributes := attributes
```

## Drawing

Draw the inspector panel

```
search @inspector
  inspector = [#inspector target type]

bind @browser
  [#div inspector children:
    [#header text: "Inspecting {{target}} of type {{type}}"]
    [#div #inspector-content inspector class: "flex-row"]]
```

Draw options sub-panel

```
search @inspector
  inspector = [#inspector target type]
  options = [#option type]

search @browser
  wrapper = [#inspector-content inspector]

bind @browser
  wrapper.children += [#div class: "attributes-panel" inspector sort: 1 style: [margin-right: 10] children:
    [#div text: "Options" sort: 1]
    [#button style: [display: "block" width: 250] text: options.text sort: options.sort]]

```

Draw attributes sub-panel

```
search @inspector
  inspector = [#inspector target attributes]

search @browser
  wrapper = [#inspector-content inspector]

bind @browser
  wrapper.children += [#div class: "attributes-panel" inspector sort: 2 children:
    [#div text: "Attributes"]
    [#div class: "attribute" inspector text: attributes]
  ]
```


Draw some bs

```
search @inspector
  inspector = [#inspector target]

bind (@browser, @view)
  [#attribute-table entity: target]
```
