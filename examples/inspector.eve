# Inspector

The inspector ("don't panic" button) is Eve's interactive debugging tool. It acts as a go between to help the Analyzer understand what's wrong based on your input. It handles the subset of issues that Eve can't know about a priori, where the program is valid and reasonable but not behaving as you intend; e.g.:

- *"I shouldn't be able to see this button when I'm not logged in."*
- *"The student attendance list is missing."*
- *"Too many emails were sent to each client."*
- *"The clock hand in the wrong position."*
- *"This program slow."*

Once Eve understands what the issue is, it provides a set of structured questions to work backwards through the symptoms to the source. Just telling you "the block labelled 'draw a sign out button when logged in' drew the sign out button" is worse than useless. However, with a little help from you ("that user shouldn't have the tag `#logged-in` right now), Eve can work backwards and say "the `#logged-in` tag was never removed from the user because she did not have an email attribute.

When you've arrived at the root of the problem, the inspector provides tools to figure out why it happened. If, instead a missing attribute, the issue involved incorrect values (perhaps the result of mathematical error), Eve can show you intermediates to find where the breakdown occurs. When too many or too few rows match a pattern, Eve can show you the cardinality of the actions in a block to get a sense of why the numbers don't add up. Some issues the inspector can help diagnose can be found in  the **Example Scenarios** section.


```
commit @inspector
  [#inspector]
```

## Events

When an inspector alt-click comes in, retarget the inspector to the alt-clicked entity/element. Kill any existing states as well.

```
search @event
  [#inspector #click #direct-target target type]

search @inspector
  inspector = [#inspector]

commit @inspector
  inspector.target := target
  inspector.type := type
  inspector.state := "popout"
```

While the inspector is open on an element, update its avs to that element's avs. This will persist until it's no longer potentially relevant.
@NOTE: This is kind of weird and it may be better to have multiple targets instead.

```
search @inspector
  inspector = [#inspector target type: "element"]

search @browser
  lookup[record: target, attribute, value]

commit @inspector
  inspector.avs := [attribute value]
```

When an inspector clear event comes in, remove all current inspection state.

```
search @event
  [#inspector #clear]

search @inspector
  inspector = [#inspector]

commit @inspector
  inspector.target := none
  inspector.type := none
  inspector.state := none
```

Clear the clear event
```
search @event
  event = [#inspector #clear]

commit @event
  event := none
```

When an inspector button is pressed, trigger the button's associated states.

```
search @event
  [#click #direct-target element]

search @browser
  element = [#button inspector action]

commit @inspector
  inspector.state += action
```

## States

When the `"close-popout"` state is active, remove the `"popout"` state and the `"close-popout"` states.

```
search @inspector
  inspector = [#inspector state: "close-popout"]

commit @inspector
  //inspector.state -= ("popout", "close-popout")
  inspector.state -= "popout"
  inspector.state -= "close-popout"
```

When the `"focus-blocks"` state is active, elide everything but the originating blocks for the currently inspected token.

```
search @inspector
  inspector = [#inspector state: "focus-blocks" target]

bind @editor
  [#find-source record: target]
```

If sources have been found for the target in the `"focus-blocks"` state, elide everything besides those sources.

```
search @inspector
  inspector = [#inspector state: "focus-blocks" target]

search @editor
  [#source record: target block]

bind @editor
  [#mark-between inspector type: "elision_transient" | token: block]
```

When the inspector is in a state requiring related tokens, request them from the editor.

```
search @inspector
  inspector = if i = [#inspector state: "highlight-related"] then i
              if i = [#inspector state: "shadow-unrelated"] then i

search @editor
  [#source record: target span]

bind @editor
  [#find-related | span]
```

When the editor is in the `"highlight-related"` state, mark all related tokens highlighted.

```
search @inspector
  inspector = [#inspector state: "highlight-related" target]

search @editor
  [#source record: target span]
  [#related span variable]

bind @editor
  [#mark-span inspector type: "highlight" | token: variable]
```

When the editor is in the `"shadow-unrelated"` state, mark everything besides the related tokens shadowed.

```
search @inspector
  inspector = [#inspector state: "shadow-unrelated" target]

search @editor
  [#source record: target block span]
  [#related span variable]

bind @editor
  [#mark-between inspector type: "shadow" | token: variable within: block]
```

When the editor is in the `"show-values"` state, request the intermediate values from the editor.

```
search @inspector
  inspector = [#inspector state: "show-values" target not(avs)]

search @editor
  [#source record: target block span]
  [#related span variable]

bind @editor
  [#find-value inspector | variable]
```

```
search @inspector
  inspector = [#inspector state: "show-values" target avs: [attribute value]]

search @editor
  [#source record: target block span]
  [#related span variable]

bind @editor
  [#find-value inspector | variable given: [attribute value]]
```

When the editor is in the `"show-values"` state and intermediates have been found, badge them.

```
search @inspector
  inspector = [#inspector state: "show-values" target]

search @editor
  [#source record: target block span]
  [#related span variable]
  [#value variable value row: 1]

bind @editor
  [#mark-span inspector type: "badge" kind: "intermediate" target message: value token: variable]
```

When the inspector is in the `"show-cardinality"` state, request the cardinalities from the editor.

```
search @inspector
  inspector = [#inspector state: "show-cardinality" target]

search @editor
  [#source record: target block span]
  [#related span variable]

bind @editor
  [#find-cardinality variable]
```

When the editor is in the `"show-cardinality"` state and cardinalities have been found, badge them.

```
search @inspector
  inspector = [#inspector state: "show-cardinality" target]

search @editor
  [#source record: target block span]
  [#related span variable]
  [#cardinality variable cardinality]

bind @editor
  [#mark-span inspector type: "badge" kind: "cardinality" target message: cardinality | token: variable]
```

## Drawing

When an `#inspector` is open with type `"element"` and a target, show the element popout.

```
search @inspector
  inspector = [#inspector state: "popout" target]

bind @view
  attributes = [#attribute-table inspector entity: target]

bind @browser
  inspector <- [#div class: "flex-row inspector-pane" children:
    [#div #options-panel children:
      [#button inspector text: "Who created this?" action: ("close-popout", "focus-blocks", "shadow-unrelated")]
      [#button inspector text: "Why aren't there more or less of these?" action: ("close-popout", "focus-blocks", "shadow-unrelated", "show-cardinality")]
      [#button inspector text: "What values went into making this?", action: ("close-popout", "focus-blocks", "shadow-unrelated", "show-values")]
      [#button inspector text: "Why is nothing here?"]]
    [#div #attributes-panel children: attributes]]
```







## Example Scenarios

### Missing Attribute

*"I shouldn't be able to see this button when I'm not logged in."*

1. Click the investigate button.
2. Click the logout button.
  - Should this not show up right now?
  - Are there too many or few of these?
  - Does this have an incorrect value?
    - List of attributes
3. This should not show up right now.
  - Filter code to blocks which create the logout button.
  - Show a timeline of events creating the button.
    - The `[#button #log-out]` is drawn because `app.user` is tagged `#logged-in`.
    - The `app.user` is tagged `#logged-in` because the `[#button #login]` was clicked.
  - List blocks which could cause it to stop drawing.
    - The `app.user` `#logged-in` tag was not removed when `[#button #logout]` was clicked because `app.user` did not have an `email` attribute.

### Bad Join

*"The student attendance list is missing."*

1. Click the investigate button.
2. Click where the attendance list belongs.
  - Qs
3. This should contain something.
  - Filter code to blocks which can create children for this element.
  - Highlight the bailing reason for each block.
  - Summary
    - [this block](#) can insert here, but `[#app page: not(grades)]`
    - [this block](#) can insert here, but `[#app page: not(syllabus)]`
    - [this block](#) can insert here, but `teacher.students` is empty
4. Click `teacher.students`
  - Filter code to the blocks affecting `teacher.students`
    - [this block](#) creates `teacher.students`, but `not(student.name = school.name)`


### Wrong Cardinality

*"Too many emails were sent to each client."*

1. Click the investigate button.
2. Click an email to a client.
  - Should this not show up right now?
  - Are there too many or few of these?
  - Does this have an incorrect value?
    - List of attributes
3. There are too many of these.
  - Filter code to the block which created the emails.
  - Gray out the patterns that do not contribute to the cardinality of the emails.
  - Embed a cardinality badge for each relevant pattern.
  - Summary
    - an email was created for each `[#client email]` (721) X `[#promo message]` (1) X `[#admin email]` (5).
  - Click a pattern to see its values.
4. Click `[#admin email]`.
  - There are 5 `[#admin]`s, each with one `email`. These are: ...

### Wrong Value

*"The clock hand in the wrong position."*

1. Click the investigate button.
2. Click the clock hand.
  - Should this not show up right now?
  - Are there too many or few of these?
  - Does this have an incorrect value?
    - List of attributes
3. Click the `x2` attribute.
  - Filter code to the blocks affecting the `x2` attribute of the entity.
  - Gray out the patterns that do not contribute to the `x2` attribute.
  - Embed value badges for each relevant variable.
  - Summary
    - `[#clock-hand angle` (70) `length` (30) `]`.
    - `x2` (78.19) `= 50 + (length` (30) `* sin[angle` (70) `]` (0.94) `)`.
    - `hand <- [#line x1: 50, y1: 50, x2` (78.19) `y2]`.
4. Click the `angle` attribute.
  - Filter code to the blocks affecting the `angle` attribute of the `[#clock-hand]`
  - Gray out the patterns that do not contribute to the `angle attribute`.
  - Embed value badges for each relevant variable.
  - Summary
    - `[#clock-hand #hour-hand angle` (900)`: 60 * hours` (15) `, length: 30, stroke: "#023963"]`

### Performance

*"This program slow."*

1. Click the investigate button.
2. ???
3. Color-code blocks by total time spent.
4. Click a block.
  - Display total percentage of time spent.
  - Display total number of rows run.
  - Display average/max/min time per row.

### Exploration

*"What has this block done?"*
1. Click the investigate button.
2. Click the block
  - What does this depend on?
  - What does this create?
  - What depends on this?
3. What does this create?
  - List patterns and cardinalities created by this node
  - Highlight visible side effects (e.g. ui)

*"What created this?"*
1. Click the investigate button.
2. Click the element or pattern
  - What created this?
3. What created this?
  - Filter code to blocks affecting this.
  - Highlight the specific actions impacting this.


## Inspector views

- Element
- Variable
- Action
- Scan
- Block

- Active element
  - Something's wrong
    - Are there too many/few of these?
    - Is a value wrong?
    - Is something missing?
    - Should this not be here? (?)
  - Exploration
    - source
    - dependents

- Active variable
  - Something's wrong
    - Are there too many/few of these?
