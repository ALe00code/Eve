# Fruity

## Setup
*Fruits* ***have*** **colors**
- yellow
  - sort of yellow
- red
- orange
- `green`
- white

Add some fruits to the system

```
commit
  [#fruit name: "lemon" color: "yellow"]
  [#fruit name: "cherry" color: "red"]
  [#fruit name: "orange" color: "orange"]
  [#fruit name: "apple" color: "green"]
  [#fruit name: "banana" color: "yellow"]
  [#fruit #exotic name: "lychee" color: "white"]
  [#fruit name: "papaya" color: "yellow"]
  [#fruit name: "kiwi" color: "green"]
```

### Drawing

1. Draw some stuff
2. ...?
3. Profit!

Draw a list of fruits

```
search
  fruit = [#fruit color name]
bind @browser
  [#div fruit ix: name, text: name, style: [color]]
```

## Interaction

Toggle whether the attribute table is open for the clicked fruit.

```
search @event
  [#click element]

search (@session, @browser)
  element = [fruit]
  open = if fruit.open = true then false
         else true

commit @session
  fruit.open := open
```

While the fruit is open, inject an attribute table into it.
```
search
  fruit = [#fruit open: true]

search @browser
  div = [#div fruit]

bind (@view, @browser)
  div.children := [#attribute-table entity: fruit]
```

trash yo

```
search @event
  [#click element]

search (@session, @browser)
  element = [fruit]

search @view
  [#attribute-table entity: element]

commit @browser
  element.children := none
```

# Mock

```
commit @editor
  [#inspect]
```

Store id mappings for mocks.

```
search
  block = "editor|block|18"

commit @mock
  [#block #draw-fruits block]

  [#variable name: "fruit" block token:
    ("editor|block|18|token|1", "editor|block|18|token|15")]

  [#variable name: "color" block token:
    ("editor|block|18|token|6", "editor|block|18|token|25")]

  [#variable name: "name" block token:
    ("editor|block|18|token|7", "editor|block|18|token|18", "editor|block|18|token|21")]
```

Mock sources and relateds for all the fruit divs.

```
search @browser
  target = [#div fruit]

search @mock
  [#block #draw-fruits block]
  [#variable block token]

commit @mock
  [#source target source: block type: "code_block"]
  [#related target type: "identifier" block | token]
```

Respond to `#find-source` with mocked sources.

```
search @editor
  [#find-source target]

search @mock
  s = [#source target source type]

bind @editor
  s <- [#source target source type]
```

Respond to `#find-related` with mocked relateds.

```
search @editor
  [#find-related target block]

search @mock
  r = [#related target block type token]

bind @editor
  r <- [#related target block type token]
```

Mock up intermediate values for the fruit divs.
@NOTE: We're mocking up the behavior of fixed `[variable: <fruit>, value: <inspector.target>]` here, we're just pretending that's being provided through magic.

```
search @editor
  [#find-value variable]

search @mock
  [#variable name token: variable]

search @inspector
  [#inspector target]

search @browser
  target = [#div fruit]

search
  value = if name = "fruit" then fruit
          else if lookup[record: fruit attribute: name value] then value

bind @editor
  [#value variable value row: 1]
```
Mock up cardinalities for the fruit divs.

```
search @editor
  [#find-cardinality token]

search @mock
  [#variable block name token]

search @browser
  target = [#div fruit]

search
  value = if name = "fruit" then fruit
          else if lookup[record: fruit attribute: name value] then value

  cardinality = count[given: value per: token]

bind @editor
  [#cardinality token cardinality]
```
