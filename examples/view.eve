# Views

## Simple

### Value

A `#value` view just embeds the `value`(s) its passed.

```
search @view
  wrapper = [#value value]
  ix = sort[value]
  lookup[record: wrapper, attribute: "tag", value: "value", node]

bind @browser
  wrapper <-
    [#view #div node children:
      [#div sort: ix text: value]]
```

## Tables

### KV Table

A `#kv-table` is a two-column table which may have many values per key. All values for the same key will be grouped.

Create the DOM structure for `#kv-table`s.

```
search @view
  wrapper = [#kv-table kvs: [key]]
  ix = sort[value: key]

bind @browser
  wrapper <- [#view #div #view class: "view kv-table" children:
    [#div class: "kv-row" sort: ix wrapper children:
      [#div text: key]
      [#div #kv-values class: "kv-values" wrapper key]]]
```

Inject the values for each key in the `#kv-table`.

```
search @view
  wrapper = [#kv-table kvs: [key value]]
  ix = sort[value per: key]

search @browser
  value-column = [#kv-values wrapper key]

bind @browser
  value-column.children += [#div value-column text: value sort: ix]
```

### Attribute Table

**DEPRECATED** This is a hack, since we do not support dynamic scoping, you cannot control what scope it finds EAVs in. Do not use this.

```
search @view
  wrapper = [#attribute-table entity]
  lookup[record: wrapper, attribute: "tag", value: "attribute-table", node]

search (@session, @browser)
  lookup[record: entity attribute: key value]

commit @browser
  [#div text: "GOT NODE {{node}}"]

bind @view @browser
  wrapper.node := node
  wrapper.tag += "kv-table"
  wrapper.kvs := [key value]
```
