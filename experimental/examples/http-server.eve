Pre-fetch the code for hard-coded watchers
```
  commit
    [#watcher @browser]
    [#watcher @editor]
```

```
  match
    watcher = [#watcher name]
    not(watcher.code)
  match @file
    [#root child: [@evesrc child: [name: "{{name}}.eve" contents: code]]]
  commit
    watcher.code := code
```


start path resolution
```
  match @file
    fr = [#root]
  match
    connection = [#http-request]
    r = connection.request
    headers = r.headers
    split[text:r.url token index, by:"/"]

    websocket = if headers.Sec-WebSocket-Protocol = "eve-json" then true else false
  commit
    request = [#request-object connection websocket requires: "browser"]
  bind
    [#path request index:1 file:fr]
    [#path request index token]
```

If a path is rooted in /edit, parse it without the first path segment and tag the request accordingly
```
  match
    path = [#path request index: 2 token: "edit"]
  match @file
    fr = [#root]
  bind
    path.file := fr
  commit
    request.requires += "editor"
```

resolve a path
```
match
    [#path index:pindex file:pfile]
match @file
    f = pfile.child
    token = f.name
match
    child = [#path index:(pindex + 1) token]
bind
    child.file := f
```

path search complete
```
match
     [#path request index token]
     final = [#path index: count[given: index] file]
     split[text:final.token by:"." token:extoken index:exindex]
     exindex = 2
     // since this object is part of the event context, its
     // not avilable when we're looking for it in send eve bootsrap

commit
     [#complete-object request extension:extoken token:final.token file scope: [bags: [Spoooogle: true]]]
```


assert the content type table in the same t as the content response
```
match
     [#complete-object]
bind
     [#content-type suffix:"jpeg" type:"application/jpeg"]
     [#content-type suffix:"css" type:"text/css"]
     [#content-type suffix:"js" type:"application/javascript"]
     [#content-type suffix:"html" type:"text/html"]
```

complete! send content response
```
  match
     r = [#request-object connection websocket:false]
     c = [#complete-object extension file]
     ct = [#content-type suffix:extension]
  match @file
     conts = file.contents
  commit
    connection.response := [
       content: conts
       status:"200"
       reason:"OK"
       header:[Content-Type:ct.type]]
    r := none
    c := none
```


send eve bootstrap
```
  match
     r = [#request-object connection websocket:false]
     c = [#complete-object token extension:"eve" file]
  match @file
     [#root child:[name:"index.html" contents]]
  commit
     connection.response := [
       content: contents
       status:"200"
       reason:"OK"
       header:[Content-Type:"text/html"]]
     r := none
     c := none
```

Prepare the default bags in scope for a child process
```
  match
    r = [#request-object websocket:true]
    c = [#complete-object extension:"eve" scope]

  match @bag
    all = [#bag @all]

  commit @bag
    session = [#bag @session r]

  commit
    scope.bags <- [session, all]
    scope.read += session
    scope.write += session
```

Prepare any watchers the request requires
```
  match
    r = [#request-object connection websocket:true requires: watcher-name]
    c = [#complete-object token extension:"eve" file scope]
    [#watcher name: watcher-name code]

  commit @bag
    module = [#bag name: watcher-name r code]

  commit
    [#eav entity: scope.bags attribute: watcher-name value: module]
```

Mirror the scope object into process due to implementation issues
```
  match
    r = [#request-object connection websocket:true]
    c = [#complete-object token extension:"eve" file scope]

  commit @process
    scope.read := scope.read
    scope.write := scope.write
    scope.bags := scope.bags
```

```
  match
    r = [#request-object connection websocket:true]
    c = [#complete-object token extension:"eve" file scope]
    [#eav entity: scope.bags attribute: module-name value: module]
    not(module-name = "Spoooogle")
  commit @process
    [#eav entity: scope.bags attribute: module-name value: module]
```

start eve program
```
  match
    r = [#request-object connection websocket:true]
    c = [#complete-object token extension:"eve" file scope]

  match @file
    source = file.contents

  commit @process
     child = [#process source name:token scope: [read: scope.read write: scope.write bags: scope.bags]] //
  commit
     connection.upgrade := child
     r := none
     c := none
```

```
  match
    r = [#request-object connection websocket:true]
    c = [#complete-object token extension:"eve" file scope]

    bs = scope.bags
```


no such file!
```
   match
      not ([#complete-object])
      r = [#request-object connection]
   commit
      connection.response :=
       [status:"404"
        reason:"No such object"
        header: [Spoogle: "nothing"]
        content: ""]
      r := none
```

Create a globally shared bag named all

```
  commit @bag
    [#bag @all]
```
